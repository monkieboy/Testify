	"Spec Scaffolding": {
		"prefix": "spec",
		"body": [
		"using Xunit;",
		"using FluentAssertions;",
		"using Testify.Bdd;",
		"using Xunit.Abstractions;",
		"using OpenQA.Selenium;",
		"",
		"namespace ${1:PROJECT_NAME}.AutomationTests.Specs",
		"{",
		"\tpublic class ${2:SPECNAME} : $1.AutomationTests.TestBase",
		"\t{",
		"\t\tprivate readonly Xunit.Abstractions.ITestOutputHelper _output;",
		"\t\tprivate readonly Testify.Bdd.Feature _feature;",
		"",
		"\t\tpublic $2(Xunit.Abstractions.ITestOutputHelper output) : base(output)",
		"\t\t{",
		"\t\t_output = output;",
		"\t\tvar featureFactory = new Testify.Bdd.FeatureFactory(output);",
		"\t\t_feature = featureFactory.Create(\"${3:FEATURE}\", \"${4:DESCRIPTION}\");",
		"\t\t}",
		"",
		"\t\t[Xunit.FactAttribute]",
		"\t\tpublic void ${5:STORY}()",
		"\t\t{",
		"\t\t\tvar result =",
		"\t\t\t_feature",
		"\t\t\t\t.WithScenario(\"${6:SCENARIO}\")",
		"\t\t\t\t.Given(\"${7:GIVEN}\", EmptyStep)",
		"\t\t\t\t.When(\"${8:WHEN}\", EmptyStep)",
		"\t\t\t\t.Then(\"${9:THEN}\", EmptyStep)",
		"\t\t\t\t.Verify();",
		"\t\t\tresult.Success.Should().BeTrue();$0",
		"\t\t}",
		"",
		"\t\tprivate void EmptyStep()",
		"\t\t{",
		"\t\t\t_output.WriteLine(\"empty step in test\");",
		"\t\t}",
		"\t}",
		"}"
		],
		"description": "Put in place the essentials for defining a spec"
	}
